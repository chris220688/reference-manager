version: "3"

services:
  mongodb-primary:
    hostname: mongodb-primary
    container_name: mongodb-primary
    image: ${MONGODB_IMAGE}
    environment:
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
      - MONGODB_REPLICA_SET_KEY=${MONGODB_REPLICA_SET_KEY}
      - MONGODB_REPLICA_SET_NAME=${MONGODB_REPLICA_SET_NAME}
    ports:
      - "27017:27017"
    networks:
      - stack

  mongodb-secondary:
    hostname: mongodb-secondary
    container_name: mongodb-secondary
    image: ${MONGODB_IMAGE}
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_PRIMARY_HOST=mongodb-primary
      - MONGODB_PRIMARY_PORT_NUMBER=27017
      - MONGODB_PRIMARY_ROOT_PASSWORD=${MONGODB_PRIMARY_ROOT_PASSWORD}
      - MONGODB_REPLICA_SET_KEY=${MONGODB_REPLICA_SET_KEY}
      - MONGODB_REPLICA_SET_NAME=${MONGODB_REPLICA_SET_NAME}
    networks:
      - stack

  mongodb-arbiter:
    hostname: mongodb-arbiter
    container_name: mongodb-arbiter
    image: ${MONGODB_IMAGE}
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_REPLICA_SET_MODE=arbiter
      - MONGODB_PRIMARY_HOST=mongodb-primary
      - MONGODB_PRIMARY_PORT_NUMBER=27017
      - MONGODB_PRIMARY_ROOT_PASSWORD=${MONGODB_PRIMARY_ROOT_PASSWORD}
      - MONGODB_REPLICA_SET_KEY=${MONGODB_REPLICA_SET_KEY}
      - MONGODB_REPLICA_SET_NAME=${MONGODB_REPLICA_SET_NAME}
    networks:
      - stack

  elasticsearch:
    hostname: elasticsearch
    container_name: elasticsearch
    image: ${ELASTICSEARCH_IMAGE}
    environment:
    # - node.name=elasticsearch
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - cluster.name=elasticsearch
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - cluster.routing.allocation.disk.threshold_enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    #   - "9300:9300"
    networks:
      - stack

  elasticsearch-setup:
    hostname: elasticsearch-setup
    container_name: elasticsearch-setup
    depends_on:
      - elasticsearch
    build:
      context: .
      dockerfile: elasticsearch/Dockerfile
    environment:
      - WAIT_HOSTS=elasticsearch:9200
      - WAIT_HOSTS_TIMEOUT=60
      - WAIT_AFTER_HOSTS=10
    command: >
      sh -c "/wait && curl -X PUT -H 'Content-Type: application/json' -d @referencemanager_template.json http://elasticsearch:9200/_template/referencemanager_template"
    networks:
      - stack

  consumer:
    hostname: consumer
    container_name: consumer
    build:
      context: .
      dockerfile: python/apps/consumer/Dockerfile
    working_dir: "/usr/src/apps/consumer"
    environment:
      - APP_NAME=consumer
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_INDEX=referencemanager.referencemanager
      - MSEARCH_ENDPOINT=/msearch/referencemanager/_msearch/
    command:
      pipenv run uvicorn consumer.main:app --host 0.0.0.0
    # links:
    #   - elasticsearch
    # depends_on:
    #   - elasticsearch
    # ports:
    #   - "8000:8000"
    networks:
      - stack

  producer:
    hostname: producer
    container_name: producer
    build:
      context: .
      dockerfile: python/apps/producer/Dockerfile
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
    working_dir: "/usr/src/apps/producer"
    environment:
      - APP_NAME=producer
      - DATABASE_TYPE=mongodb
      - DATABASE_HOST=mongodb-primary
      - DATABASE_PORT=27017
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - WAIT_HOSTS=mongodb-primary:27017,mongodb-secondary:27017,mongodb-arbiter:27017
      - WAIT_HOSTS_TIMEOUT=60
      - WAIT_AFTER_HOSTS=30
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_DISCOVERY_URL=https://accounts.google.com/.well-known/openid-configuration
      - GOOGLE_REDIRECT_URL=http://localhost:80/api/producer/google-login-callback/
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_DISCOVERY_URL=https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration
      - AZURE_REDIRECT_URL=http://localhost:80/api/producer/azure-login-callback/
      - FRONTEND_URL=http://localhost:80/frontend/
      - ALGORITHM=${ALGORITHM}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - AUTH_TOKEN_EXPIRE_MINUTES=${AUTH_TOKEN_EXPIRE_MINUTES}
    command:
      sh -c "/wait && pipenv run uvicorn producer.main:app --host 0.0.0.0"
    # ports:
    #   - "8001:8000"
    networks:
      - stack

  monstache:
    hostname: monstache
    container_name: monstache
    build: monstache/.
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          cpus: '1'
          memory: 256M
        reservations:
          cpus: '1'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 10s
    environment:
      - WAIT_HOSTS=mongodb-primary:27017,elasticsearch:9200
      - WAIT_HOSTS_TIMEOUT=60
    #   - MONSTACHE_CHANGE_STREAM_NS=referencemanager.referencemanager
    #   - MONSTACHE_DIRECT_READ_NS=referencemanager.referencemanager
    #   - MONSTACHE_MONGO_URL=mongodb://root:referencemanager@mongodb-primary:27017
    #   - MONSTACHE_ES_URLS=http://elasticsearch:9200
    # ports:
    #   - "8080:8080"
    command:
      sh -c "/wait && ./build/linux-amd64/monstache -f config.toml"
    networks:
      - stack

  frontend:
    hostname: frontend
    container_name: frontend
    build:
      context: .
      dockerfile: react/apps/frontend/Dockerfile
    environment:
      # Doesn't work. Needs to be set in .env file
      - REACT_APP_PRODUCER_LOGIN_ENDPOINT=http://localhost:80/api/producer/login-redirect
    ports:
      - "3000:3000"
    networks:
      - stack

  nginx:
    hostname: nginx
    container_name: nginx
    build:
      context: .
      dockerfile: nginx/Dockerfile
    depends_on:
      # Nginx should be deployed after the apps
      - frontend
      - consumer
      - producer
    ports:
      - "80:80"
    networks:
      - stack

networks:
  stack: {}
